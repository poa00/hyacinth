{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview \ud83e\udd9c","text":"<p>Hyacinth is a Discord bot which will automatically send you notifications for new listings or postings anywhere on the web.</p> <p>Taking inspiration from the venerable youtube-dl, Hyacinth provides a core interface for filtering listings and sending notifications while allowing new listing sources to be added using a flexible plugin system.</p> <p>Hyacinth is offered only in self-hosted form. This means you are the \"administrator\" of the bot, which entails:</p> <ul> <li>You provide infrastructure for the bot to run on. If you turn the bot off, you will stop receiving notifications!</li> <li>You provide the necessary API credentials, both for Discord and for any other services used by the bot</li> <li>You ensure the bot stays updated</li> </ul> <p>Because of this, usage of this bot is recommended only for technically advanced users. Familiarity with Docker and comfort with the command-line are both required.</p> <p>In return, you free yourself from the limitations of existing notification services, gaining access to advanced features such as:</p> <ul> <li>Complex filtering rules, including text-based filtering using arbitrary boolean rules</li> <li>Customizable polling intervals, allowing full control over how often the bot checks for new listings</li> <li>Search batching, reducing the number of times listing sources are polled for each search and allowing for more searches before hitting the anti-bot measures many classified ad sites have in place</li> </ul> <p>When you're ready, head over to the Getting Started page!</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>The following guide will help you through the steps needed to run a minimal installation of Hyacinth.</p>"},{"location":"getting-started/#creating-the-discord-bot","title":"Creating the Discord Bot","text":"<p>In order to connect Hyacinth to Discord, you must first configure an application for your bot in the Discord Developer Portal.</p> <ol> <li>In the Discord Developer Portal, create an application for Hyacinth</li> <li>In the <code>Bot</code> tab, add a new bot and configure the username and icon however you want</li> <li>Still in the <code>Bot</code> tab, enable the toggle for \"Message Content Intent\". This is required to allow executing commands using the <code>$</code> prefix without mentioning the bot.</li> <li>Add an OAuth redirect URL in the <code>OAuth2 -&gt; General</code> tab. This can be anything, the exact URL does not matter.</li> <li>Generate an invite URL in the <code>OAuth2 -&gt; URL Generator</code> tab. Request the \"Bot\" scope and the following permissions:</li> </ol> <p></p> <ol> <li>Copy the generated URL and invite the bot to your server!</li> </ol>"},{"location":"getting-started/#configuring-your-environment","title":"Configuring your environment","text":"<ul> <li>Ensure Docker is installed and working correctly</li> <li>Clone the project repository</li> <li>In the cloned project folder, create a new file named <code>.env</code> with the following content:</li> </ul> <pre><code># in the unix tz database format, ex. America/New_York\nHYACINTH_TZ=&lt;your timezone&gt;\n\n# copy it from the discord developer portal!\nHYACINTH_DISCORD_TOKEN=&lt;your discord token&gt;\n\n# any password is fine, it will be used for the bot's internal database\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=&lt;a random password&gt;\n</code></pre> <p>Remember to replace the values inside <code>&lt;&gt;</code>!</p> <p>Note</p> <p>Note, the <code>POSTGRES_USER</code> and <code>POSTGRES_PASSWORD</code> should not be prefixed with <code>HYACINTH_</code> (unlike all other environment variables), as they will be used by both the Hyacinth container and the official Postgres database container.</p>"},{"location":"getting-started/#downloading-geocoding-data","title":"Downloading geocoding data","text":"<p>Hyacinth automatically tries to locate the town and state of listings using a process known as reverse geocoding. Before running the bot, you must decide whether you want to use the local reverse geocoder (easier, but currently only supports listings within the US) or the Google Geocoding API.</p>"},{"location":"getting-started/#local-reverse-geocoding-us-only","title":"Local reverse geocoding (US only)","text":"<p>To use the local reverse geocoder, set <code>HYACINTH_USE_LOCAL_GEOCODER=true</code> in your <code>.env</code> file. Then, download the required data files and place them in the <code>geography</code> folder at the root of the repository (create this folder if it is not already present):</p> <ol> <li><code>cities1000.txt</code>, from geonames.org. This file is contained in <code>cities1000.zip</code>, which can be downloaded here.</li> <li><code>gadm36_USA.gpkg</code>, downloadable from gadm.org (select \"United States\" and download the \"Geopackage\").</li> </ol>"},{"location":"getting-started/#google-geocoding-api","title":"Google Geocoding API","text":"<p>To instead use the Google Geocoding API, set the following variables in your <code>.env</code> file:</p> <pre><code>HYACINTH_USE_LOCAL_GEOCODER=true\nHYACINTH_GOOGLE_GEOCODING_API_KEY=&lt;your google geocoding API key&gt;\n</code></pre> <p>Note, acquiring a Google Geocoding API key will require setting up a new project in Google Cloud Platform. Fees may be incurred if you do not configure an appropriate budget for your project. Proceed at your own risk.</p>"},{"location":"getting-started/#running-the-bot","title":"Running the bot","text":"<p>After completing the steps above, start Hyacinth with the following Docker command:</p> <pre><code>docker-compose up service\n</code></pre> <p>If everything worked correctly, the bot's status in Discord will change to online and it will start accepting commands.</p>"},{"location":"getting-started/#detached-mode","title":"Detached mode","text":"<p>After verifying that everything is working, exit with <code>Ctrl+c</code> and restart in detached mode so that the bot will continue to run even after closing the terminal window.</p> <pre><code>docker-compose up -d service\n</code></pre> <p>To stop the bot after this, use:</p> <pre><code>docker-compose down\n</code></pre>"},{"location":"usage/adding-filters/","title":"Adding filters","text":"<p>After you have created a search, filters allow you to narrow down the results.</p>"},{"location":"usage/adding-filters/#the-filter-add-command","title":"The <code>/filter add</code> command","text":"<p>Similar to searches, new filters can be created for a given channel with <code>/filter add</code>. This command takes a few arguments:</p> <code>field</code> <p>Each filter operates on a particular field of the listing. For example, <code>title</code> or <code>price</code>. Select which field you would like to filter on here.</p> <code>rule_type</code> <p>There are two rule types to choose from: <code>and</code> and <code>or</code>. As their names suggest, these indicate the boolean operator type which will be used to evaluate this filter with the other filters defined in the channel. For more details, jump down to Filter evaluation.</p> <code>rule</code> <p>The boolean expression representing this filter rule. There are two main types of rules, depending on the data type of the field you selected:</p> <ol> <li> <p>Numerical rules - for numeric fields, such as <code>price</code>, the rule should take the following form:</p> <pre><code>one of (&gt;, &gt;=. &lt;, &lt;=, =) (number)\n</code></pre> <p>For example, to filter for listings less than $100: <code>&lt;100</code>. For more complex ranges (for example, listings between $100 and $200), multiple <code>and</code> filters can be combined.</p> </li> <li> <p>String rules - for textual fields, such as <code>title</code> or <code>body</code>, the rule is a free-form boolean expression of text symbols and boolean operators. Type in any text, and it will automatically be parsed into an expression.</p> <p>For example, when searching for a new fabric couch, you might filter out leather couches with a rule such as:</p> <pre><code>couch and not leather\n</code></pre> </li> </ol>"},{"location":"usage/adding-filters/#filter-evaluation","title":"Filter evaluation","text":"<p>Whenever a new listing is detected in any of the searches active for the current channel, it is evaluated against all of the existing filter rules in order to determine whether or not a notification should be sent.</p> <p>Filter rules of different types (<code>and</code> and <code>or</code>) are evaluated together as follows:</p> <pre><code>(and-rule-1 &amp;&amp; and-rule-2 &amp;&amp; ... and-rule-n) &amp;&amp;\n    (or-rule-1 || or-rule-2 || ... or-rule-m)\n</code></pre> <p>If there are no <code>and</code>-type rules or no <code>or</code>-type rules, the corresponding section of the evaluation function is replaced with <code>true</code>. This means that when there are no filters present in a channel, notifications will be sent for all new listings.</p>"},{"location":"usage/adding-filters/#editing-or-deleting-a-filter","title":"Editing or deleting a filter","text":"<p>If you made a mistake and would like to update or remove a filter from this channel, use the <code>/filter edit</code> and <code>/filter delete</code> commands, respectively.</p>"},{"location":"usage/adding-filters/#showing-all-existing-filters","title":"Showing all existing filters","text":"<p>To display a list of all searches and filters currently active on the channel, use the <code>/show</code> command.</p>"},{"location":"usage/adding-filters/#unpausing-the-notifier","title":"Unpausing the notifier","text":"<p>When you're ready to start receiving notifications, unpause the notifier with the <code>/pause</code> toggle command!</p>"},{"location":"usage/configuration/","title":"Configuration","text":"<p>The <code>/configure</code> command allows for further customization of notification behavior.</p>"},{"location":"usage/configuration/#available-settings","title":"Available settings","text":""},{"location":"usage/configuration/#notification_frequency","title":"<code>notification_frequency</code>","text":"<p>Controls the frequency that notifications will be sent to the channel. Note, this does not affect how often searches are monitored internally - it simply changes how often the bot will check its internal database for new listings and send notifications as needed to the channel.</p> <p>Set in seconds.</p>"},{"location":"usage/configuration/#home_location","title":"<code>home_location</code>","text":"<p>When formatting notifications, having a home location set will add a \"X miles away\" subtitle to each listing, when available.</p> <p>Set as a latitude/longitude pair, separated by a comma.</p>"},{"location":"usage/creating-a-search/","title":"Creating a search","text":"<p>In order to start receiving notifications for new listings, the first thing you need to do is create a new search for Hyacinth to monitor.</p>"},{"location":"usage/creating-a-search/#the-search-add-command","title":"The <code>/search add</code> command","text":"<p>To do this, navigate to the channel you would like to receive notifications in and type <code>/search add</code>. This command takes two arguments:</p> <code>plugin</code> <p>Plugins power Hyacinth's search capabilities, acting as sources for new listings. The following plugins are currently available:</p> <ul> <li><code>craigslist</code></li> <li><code>marketplace</code></li> </ul> <code>name</code> <p>A name of your choice for this search. When referencing the search in other commands (for example, <code>/search edit</code> or <code>/search delete</code>), you will select it by this name.</p> <p>For example, to create a new Craigslist search:</p> <p></p>"},{"location":"usage/creating-a-search/#configuring-the-search","title":"Configuring the search","text":"<p>After submitting the <code>/search add</code> command, a plugin-specific dialog will appear where you can enter additional information about your search.</p> <p>For example, for the Craigslist search shown above, this dialog will ask which site and category you would like to search. For this tutorial, you might pick <code>boston</code> and <code>sss</code> (general for-sale) respectively. For full details on these fields, please see the Craigslist plugin page.</p> <p>Question</p> <p>Only site and category? Where do I enter my actual search terms?</p> <p>This is what filters are for! Hyacinth supports complex filtering on any listing field, but intentionally keeps searches as wide as possible. When creating new searches, Hyacinth will attempt to reuse data from an existing search, reducing the number of outgoing network requests to plugin sources. Then, filters on each channel narrow down the results.</p> <p>This allows you to create notifications for a variety of different items without getting rate-limited and is the true power of Hyacinth!</p> <p>After creating your first search in a channel, the notifier starts paused. Add some filters, then unpause when you are ready!</p>"},{"location":"usage/monitoring/","title":"Monitoring","text":"<p>Hyacinth operates by scraping third-party websites. At any time, a change could be made to these websites which breaks Hyacinth's integrations with them. If you wish to increase your visibility into such issues, the following page details some potential solutions.</p>"},{"location":"usage/monitoring/#metrics","title":"Metrics","text":"<p>Hyacinth includes built-in support for writing metrics to a Victoria Metrics cluster. This allows metrics such as request counts and poll job execution results to be monitored live with an observability platform like Grafana.</p> <p>To enable metrics support, add the following variables to your <code>.env</code> file:</p> <pre><code>HYACINTH_METRICS_ENABLED=true\nHYACINTH_VICTORIA_METRICS_HOST=&lt;your victoria metrics host&gt;\n</code></pre> <p>The following metrics are supported:</p> <ul> <li><code>hyacinth_scrape_count</code> - Counter of pages scraped by Browserless, labeled by domain.</li> <li><code>hyacinth_poll_job_execution_count</code> - Counter representing the results of completed search poll jobs. Metric includes labels for <code>success</code> to indicate whether the polling job succeeded as well as the <code>plugin</code> the search was executed with.</li> </ul> <p>Some example queries on these metrics are provided below, ready to be pasted into a Grafana panel.</p>"},{"location":"usage/monitoring/#browserless-requests-by-domain","title":"Browserless requests by domain","text":"<pre><code>count_over_time(hyacinth_scrape_count[$__interval]) or on() vector(0)\n</code></pre>"},{"location":"usage/monitoring/#successful-poll-job-executions","title":"Successful poll job executions","text":"<pre><code>count_over_time(hyacinth_poll_job_execution_count{success=\"true\"}[$__interval]) or on() vector(0)\n</code></pre>"},{"location":"usage/monitoring/#failing-poll-job-executions","title":"Failing poll job executions","text":"<pre><code>count_over_time(hyacinth_poll_job_execution_count{success=\"false\"}[$__interval]) or on() vector(0)\n</code></pre>"},{"location":"usage/monitoring/#error-reporting","title":"Error reporting","text":"<p>By default, a failing search poll job will write a crash report to the <code>logs/</code> directory. This behavior can be configured with the <code>HYACINTH_SAVE_CRASH_REPORTS</code> and <code>HYACINTH_CRASH_REPORTS_SAVE_FOLDER</code> environment variables.</p> <pre><code># default setings\nHYACINTH_SAVE_CRASH_REPORTS = true\nHYACINTH_CRASH_REPORTS_SAVE_FOLDER = logs\n</code></pre>"},{"location":"usage/plugins/craigslist/","title":"Craigslist","text":"<p>The <code>craigslist</code> plugin connects Hyacinth to Craigslist.</p>"},{"location":"usage/plugins/craigslist/#search-configuration","title":"Search configuration","text":"<p>Two fields are available for configuration when creating a new Craigslist search.</p> Site <p>The regional site to poll. This is the first part of the Craigslist domain, e.g. <code>boston</code> in boston.craigslist.org or <code>sfbay</code> in sfbay.craigslist.org.</p> Category <p>The category to poll. Must be one of the subcategories under the \"For sale\" section on the homepage, or <code>sss</code> to search everything. Housing search is currently not supported.</p> <p>Category should be entered as the 3-digit code at the end of the Craigslist URL when clicking into this category. For example, clicking into motorcycles brings you to <code>https://sfbay.craigslist.org/search/mca/</code>, so <code>mca</code> is the code for this category.</p>"},{"location":"usage/plugins/marketplace/","title":"Facebook Marketplace","text":"<p>The <code>marketplace</code> plugin connects Hyacinth to Facebook Marketplace.</p>"},{"location":"usage/plugins/marketplace/#search-configuration","title":"Search configuration","text":"<p>Two fields are available for configuration when creating a new Marketplace search.</p> Location <p>The location to search. Facebook Marketplace identifies locations either by a \"vanity URL\" (for larger cities) or by a numerical ID. To identify the vanity URL or ID for a given location, navigate to marketplace in a web browser and filter by your desired location. Then, in the URL, the URL part directly after <code>/marketplace/</code> is the vanity URL or ID.</p> <p>For example, in the URL <code>https://www.facebook.com/marketplace/boston</code>, <code>boston</code> is the vanity URL. In the URL <code>https://www.facebook.com/marketplace/107620962593801</code>, <code>107620962593801</code> is the location ID. Either can be used when configuring a search.</p> Category <p>The category to search. Similar to locations, categories are identified by either an \"SEO URL\" or a numerical ID.</p> <p>As previously, the URL part or ID can be identified by searching for the category in your browser and picking it out of the URL. For example, In the URL <code>https://www.facebook.com/marketplace/boston/vehicles</code>, <code>vehicles</code> is the SEO URL. In the URL <code>https://www.facebook.com/marketplace/boston/731115930902473</code>, <code>731115930902473</code> is the category ID. Either can be used when configuring a search.</p> <p>A complete list of categories can be easily browsed on Marketplace here.</p>"},{"location":"usage/plugins/marketplace/#limitations","title":"Limitations","text":"<p>Facebook implements aggressive rate-limiting and anti-bot measures which Hyacinth is not able to bypass. Trying to use Hyacinth from a cloud provider, over a VPN, or simply with too many active Marketplace searches is likely to result in rate-limiting.</p> <p>After getting rate-limited, Hyacinth will be unable to load Marketplace searches without being logged in. This will result in an error like</p> <pre><code>hyacinth.exceptions.ParseError: Timed out waiting for search results to render\n</code></pre> <p>during polling of your Marketplace searches. If you encounter this, you might try:</p> <ul> <li>Running Hyacinth from your home network</li> <li>Reducing the number of active Marketplace searches</li> <li>Reducing the poll interval for Marketplace searches by setting <code>HYACINTH_MARKETPLACE_POLL_INTERVAL_SECONDS</code> in your <code>.env</code> file (default is 10 minutes).</li> </ul>"}]}